package com.isp392.controller;

import com.isp392.dto.response.ApiResponse;
import com.isp392.dto.response.ItemSaleStatResponse;
import com.isp392.dto.response.RevenueReportResponse;
import com.isp392.enums.PaymentMethod; // üëà ƒê·∫£m b·∫£o import n√†y t·ªìn t·∫°i
import com.isp392.service.StatisticService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.YearMonth;
import java.util.List;

@RestController
@RequestMapping("/statistics")
@RequiredArgsConstructor
public class StatisticController {

    private final StatisticService statisticService;

    /**
     * L·∫•y b√°o c√°o doanh thu (t·ªïng h·ª£p v√† theo ph∆∞∆°ng th·ª©c thanh to√°n).
     * @param day Ng√†y (t√πy ch·ªçn)
     * @param month Th√°ng (t√πy ch·ªçn)
     * @param year NƒÉm (b·∫Øt bu·ªôc)
     * @param method Ph∆∞∆°ng th·ª©c thanh to√°n (t√πy ch·ªçn: CASH, BANK_TRANSFER)
     */
    @GetMapping("/revenue/summary")
    public ApiResponse<RevenueReportResponse> getRevenueReport(
            @RequestParam(required = false) Integer day,
            @RequestParam(required = false) Integer month,
            @RequestParam int year,
            @RequestParam(required = false) PaymentMethod method // üëà Tham s·ªë m·ªõi ƒë·ªÉ l·ªçc
    ) {
        DateRange range = calculateDateRange(day, month, year);
        // üëá Truy·ªÅn `method` v√†o service
        RevenueReportResponse report = statisticService.getRevenueReport(range.start, range.end, method);
        return ApiResponse.<RevenueReportResponse>builder()
                .result(report)
                .build();
    }


    /**
     * L·∫•y danh s√°ch m√≥n b√°n ch·∫°y nh·∫•t.
     * @param day Ng√†y (t√πy ch·ªçn)
     * @param month Th√°ng (t√πy ch·ªçn)
     * @param year NƒÉm (b·∫Øt bu·ªôc)
     * @param limit S·ªë l∆∞·ª£ng m√≥n mu·ªën l·∫•y (m·∫∑c ƒë·ªãnh l√† 5)
     */
    @GetMapping("/dishes/best")
    public ApiResponse<List<ItemSaleStatResponse>> getBestSellingDishes(
            @RequestParam(required = false) Integer day,
            @RequestParam(required = false) Integer month,
            @RequestParam int year,
            @RequestParam(defaultValue = "5") int limit
    ) {
        DateRange range = calculateDateRange(day, month, year);
        List<ItemSaleStatResponse> stats = statisticService.getBestSellingDishes(range.start, range.end, limit);
        return ApiResponse.<List<ItemSaleStatResponse>>builder()
                .result(stats)
                .build();
    }

    /**
     * L·∫•y danh s√°ch m√≥n b√°n t·ªá nh·∫•t.
     * @param day Ng√†y (t√πy ch·ªçn)
     * @param month Th√°ng (t√πy ch·ªçn)
     * @param year NƒÉm (b·∫Øt bu·ªôc)
     * @param limit S·ªë l∆∞·ª£ng m√≥n mu·ªën l·∫•y (m·∫∑c ƒë·ªãnh l√† 5)
     */
    @GetMapping("/dishes/worst")
    public ApiResponse<List<ItemSaleStatResponse>> getWorstSellingDishes(
            @RequestParam(required = false) Integer day,
            @RequestParam(required = false) Integer month,
            @RequestParam int year,
            @RequestParam(defaultValue = "5") int limit
    ) {
        DateRange range = calculateDateRange(day, month, year);
        List<ItemSaleStatResponse> stats = statisticService.getWorstSellingDishes(range.start, range.end, limit);
        return ApiResponse.<List<ItemSaleStatResponse>>builder()
                .result(stats)
                .build();
    }

    // L·ªõp helper nh·ªè ƒë·ªÉ l∆∞u ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
    private record DateRange(LocalDate start, LocalDate end) {}

    // H√†m private ƒë·ªÉ t√≠nh to√°n kho·∫£ng ng√†y d·ª±a tr√™n input
    private DateRange calculateDateRange(Integer day, Integer month, int year) {
        LocalDate startDate;
        LocalDate endDate;

        if (month == null && day == null) {
            // Th·ªëng k√™ theo NƒÇM
            startDate = LocalDate.of(year, 1, 1);
            endDate = LocalDate.of(year, 12, 31);
        } else if (day == null) {
            // Th·ªëng k√™ theo TH√ÅNG
            YearMonth yearMonth = YearMonth.of(year, month);
            startDate = yearMonth.atDay(1);
            endDate = yearMonth.atEndOfMonth();
        } else {
            // Th·ªëng k√™ theo NG√ÄY
            startDate = LocalDate.of(year, month, day);
            endDate = startDate;
        }
        return new DateRange(startDate, endDate);
    }
}