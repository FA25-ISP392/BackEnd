package com.isp392.service;

import com.isp392.dto.response.ItemSaleStatResponse;
import com.isp392.dto.response.RevenueByMethodResponse;
import com.isp392.dto.response.RevenueReportResponse;
import com.isp392.entity.Dish;
import com.isp392.enums.PaymentMethod; // üëà ƒê·∫£m b·∫£o import n√†y t·ªìn t·∫°i
import com.isp392.repository.DailyPlanRepository;
import com.isp392.repository.DishRepository;
import com.isp392.repository.PaymentRepository;
import com.isp392.repository.projection.DishSalesProjection;
import com.isp392.repository.projection.RevenueByMethodProjection;
import com.isp392.repository.projection.TotalRevenueProjection;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class StatisticService {

    private final DailyPlanRepository dailyPlanRepository;
    private final DishRepository dishRepository;
    private final PaymentRepository paymentRepository;

    public List<ItemSaleStatResponse> getBestSellingDishes(LocalDate startDate, LocalDate endDate, int limit) {
        PageRequest pageable = PageRequest.of(0, limit);
        List<DishSalesProjection> projections = dailyPlanRepository.findBestSellingDishes(startDate, endDate, pageable);
        return mapProjectionsToResponse(projections);
    }

    public List<ItemSaleStatResponse> getWorstSellingDishes(LocalDate startDate, LocalDate endDate, int limit) {
        PageRequest pageable = PageRequest.of(0, limit);
        List<DishSalesProjection> projections = dailyPlanRepository.findWorstSellingDishes(startDate, endDate, pageable);
        return mapProjectionsToResponse(projections);
    }

    private List<ItemSaleStatResponse> mapProjectionsToResponse(List<DishSalesProjection> projections) {
        if (projections.isEmpty()) {
            return Collections.emptyList();
        }

        List<Integer> dishIds = projections.stream()
                .map(DishSalesProjection::getItemId)
                .collect(Collectors.toList());

        Map<Integer, String> dishNamesMap = dishRepository.findAllById(dishIds).stream()
                .collect(Collectors.toMap(Dish::getDishId, Dish::getDishName));

        return projections.stream()
                .map(p -> ItemSaleStatResponse.builder()
                        .itemId(p.getItemId())
                        .itemName(dishNamesMap.getOrDefault(p.getItemId(), "M√≥n kh√¥ng x√°c ƒë·ªãnh"))
                        .totalSold(p.getTotalSold())
                        .build())
                .collect(Collectors.toList());
    }

    /**
     * L·∫•y b√°o c√°o doanh thu t·ªïng h·ª£p v√† chi ti·∫øt theo ph∆∞∆°ng th·ª©c thanh to√°n.
     *
     * @param startDate Ng√†y b·∫Øt ƒë·∫ßu (bao g·ªìm)
     * @param endDate   Ng√†y k·∫øt th√∫c (bao g·ªìm)
     * @param method    Ph∆∞∆°ng th·ª©c thanh to√°n (null = t·∫•t c·∫£, ho·∫∑c l·ªçc theo CASH/BANK_TRANSFER)
     * @return B√°o c√°o doanh thu
     */
    // üëá S·ª≠a l·∫°i ch·ªØ k√Ω h√†m ƒë·ªÉ nh·∫≠n `method`
    public RevenueReportResponse getRevenueReport(LocalDate startDate, LocalDate endDate, PaymentMethod method) {
        LocalDateTime startDateTime = startDate.atStartOfDay();
        LocalDateTime endDateTime = endDate.atTime(LocalTime.MAX);

        // 1. Query t·ªïng doanh thu (Kh√¥ng thay ƒë·ªïi)
        TotalRevenueProjection totalProj = paymentRepository.findTotalRevenueByDateRange(startDateTime, endDateTime);

        // 2. Query doanh thu theo t·ª´ng ph∆∞∆°ng th·ª©c (Kh√¥ng thay ƒë·ªïi)
        List<RevenueByMethodProjection> methodProjs = paymentRepository.findRevenueByMethodAndDateRange(startDateTime, endDateTime);

        // 3. Chuy·ªÉn ƒë·ªïi projection sang DTO (Kh√¥ng thay ƒë·ªïi)
        List<RevenueByMethodResponse> revenueByMethodList = methodProjs.stream()
                .map(proj -> RevenueByMethodResponse.builder()
                        .method(proj.getMethod())
                        .totalRevenue(proj.getTotalRevenue() != null ? proj.getTotalRevenue() : 0.0)
                        .totalOrders(proj.getTotalOrders() != null ? proj.getTotalOrders() : 0L)
                        .build())
                .collect(Collectors.toList());

        // üëá B·∫ÆT ƒê·∫¶U LOGIC L·ªåC M·ªöI

        double grandTotalRevenue;
        long grandTotalOrders;
        List<RevenueByMethodResponse> finalRevenueList;

        if (method == null) {
            // --- TR∆Ø·ªúNG H·ª¢P 1: Kh√¥ng l·ªçc (gi·ªëng nh∆∞ c≈©) ---
            grandTotalRevenue = (totalProj != null && totalProj.getTotalRevenue() != null) ? totalProj.getTotalRevenue() : 0.0;
            grandTotalOrders = (totalProj != null && totalProj.getTotalOrders() != null) ? totalProj.getTotalOrders() : 0L;
            finalRevenueList = revenueByMethodList; // Gi·ªØ nguy√™n danh s√°ch ƒë·∫ßy ƒë·ªß

        } else {
            // --- TR∆Ø·ªúNG H·ª¢P 2: L·ªçc theo `method` ---

            // L·ªçc danh s√°ch chi ti·∫øt ch·ªâ gi·ªØ l·∫°i method ƒë∆∞·ª£c y√™u c·∫ßu
            finalRevenueList = revenueByMethodList.stream()
                    .filter(r -> r.getMethod() == method)
                    .collect(Collectors.toList());

            // T√≠nh l·∫°i t·ªïng doanh thu v√† t·ªïng ƒë∆°n h√†ng T·ª™ danh s√°ch ƒë√£ l·ªçc
            grandTotalRevenue = finalRevenueList.stream()
                    .mapToDouble(RevenueByMethodResponse::getTotalRevenue)
                    .sum();

            grandTotalOrders = finalRevenueList.stream()
                    .mapToLong(RevenueByMethodResponse::getTotalOrders)
                    .sum();
        }

        // üëÜ K·∫æT TH√öC LOGIC L·ªåC M·ªöI

        // 5. X√¢y d·ª±ng DTO Response cu·ªëi c√πng (d√πng c√°c bi·∫øn `final...` ƒë√£ t√≠nh to√°n)
        return RevenueReportResponse.builder()
                .startDate(startDate)
                .endDate(endDate)
                .grandTotalRevenue(grandTotalRevenue)
                .grandTotalOrders(grandTotalOrders)
                .revenueByMethod(finalRevenueList) // Tr·∫£ v·ªÅ danh s√°ch ƒë√£ l·ªçc (ho·∫∑c ƒë·∫ßy ƒë·ªß)
                .build();
    }
}